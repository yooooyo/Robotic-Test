diff a/Power State detect/Power State detect/Form1.cs b/Power State detect/Power State detect/Form1.cs	(rejected hunks)
@@ -14,88 +14,64 @@
 using System.IO;
 using System.IO.Ports;
 
-
 namespace Power_State_detect
 {
     public partial class Form1 : Form
     {
-
-
-
+        Power.Statuses Powerstatus = new Power.Statuses();
+        Power.Options Poweroptions = new Power.Options();
         public Form1()
         {
             InitializeComponent();
             SearchPort();
         }
         #region Power State
-        [DllImport("Powrprof.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
-        public static extern bool SetSuspendState(bool hiberate, bool forceCritical, bool disableWakeEvent);
         private void Form1_Load(object sender, EventArgs e)
         {
-            Power.Statuses.Enroll_Event();
-            //SystemEvents.PowerModeChanged += PowerChange;
+            Powerstatus.Enroll_Event();
             powerstatus.Text = "";
         }
 
-        private void PowerChange(object s,PowerModeChangedEventArgs e)
-        {
-            switch (e.Mode)
-            {
-                case PowerModes.Resume:
-                    powerstatus.Text += e.Mode.ToString() + Environment.NewLine;
-                    break;
-                case PowerModes.StatusChange:
-                    powerstatus.Text += Check_AC_DC() + Environment.NewLine;
-                    break;
-                case PowerModes.Suspend:
-                    powerstatus.Text += e.Mode.ToString() + Environment.NewLine;
-                    break;
-            }
-        }
-        public void System_Event_PowerModeChange(object sender, PowerModeChangedEventArgs e)
-        {
-            powerstatus.Text += e.Mode.ToString() + Environment.NewLine;
-        }
+
 
         private void btn_S4_Click(object sender, EventArgs e)
         {
             powerstatus.Text += "Entering S4" + Environment.NewLine;
-            SetSuspendState(true, true, true);
+            Poweroptions.Hibernate();
+
+
+
         }
 
         private void btn_S3_Click(object sender, EventArgs e)
         {
+            Powerstatus.SetWaitForWakeUpTime();
             powerstatus.Text +="Entering S3" + Environment.NewLine;
-            SetSuspendState(false, true, true);
+            Poweroptions.Sleep();
+
+            long wakeupfrom = Convert.ToInt64(cb_wakeupfromSec.Text);
+            //if (wakeupfrom > 0)
+            //{
+            //    Powerstatus.SetWaitForWakeUpTime(wakeupfrom);
+            //}
         }
 
         private void btn_S5_Click(object sender, EventArgs e)
         {
             powerstatus.Text = "Restarting" + Environment.NewLine;
-            System.Diagnostics.Process.Start("C:\\WINDOWS\\system32\\shutdown.exe", "-f -r -t 0");  // -f force -r restart -t 0 after 0 second
+            Poweroptions.Restart();
         }
 
         private void btn_shutdown_Click(object sender, EventArgs e)
         {
-            System.Diagnostics.Process.Start("C:\\WINDOWS\\system32\\shutdown.exe", "-f -s -t 0"); //-f force -s shoutdown -t 0 after 0 second
+            Poweroptions.Shutdown();
         }
 
         private void btn_logout_Click(object sender, EventArgs e)
         {
-            System.Diagnostics.Process.Start("C:\\WINDOWS\\system32\\shutdown.exe", "-l");  //-l logout
+            Poweroptions.Logout();
         }
 
-        private string Check_AC_DC()
-        {
-            Boolean isRunningOnBattery = (System.Windows.Forms.SystemInformation.PowerStatus.PowerLineStatus == PowerLineStatus.Offline);
-
-            if (isRunningOnBattery) return "DC mode";
-            else return "AC mode";
-        }
-
-        /*
-        To-do       Creat a wake up timer
-        */
         #endregion
 
         #region Serial Port
